<?php

/*
 * libkinetic
 *
 * Copyright (C) 2018 SOFe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare(strict_types=1);

use SOFe\Libkinetic\InvalidNodeException;
use SOFe\Libkinetic\Node\KineticNodeWithId;
use SOFe\Libkinetic\ParseException;
use SOFe\Libkinetic\Parser\XmlFileParser;

require_once __DIR__ . "/../cli-autoload.php";

if(!isset($argv[4])){
	throw new InvalidArgumentException("Usage: php $argv[0] def <xml file> <src> <fqn> [eol lf|crlf] [spaces <indent size>] [struct \"interface|([abstract|final] class)\"]");
}
$file = $argv[2];
if(!is_file($file)){
	throw new InvalidArgumentException("$file is not a file");
}

$parser = new XmlFileParser(fopen($file, "rb"), basename($file));

try{
	$parser->parse();
}catch(InvalidNodeException $e){
	echo "Invalid: {$e->getMessage()}\n";
	if(strpos(__FILE__, "phar://") !== 0){
		echo $e->getTraceAsString() . "\n";
	}
	exit(1);
}catch(ParseException $e){
	echo "Parse error: {$e->getMessage()}\n";
	exit(1);
}

$EOL = PHP_EOL;
$INDENT = "\t";
$STRUCT = "interface";

for($i = 5; isset($argv[$i + 1]); ++$i){
	if($argv[$i] === "eol"){
		$EOL = $argv[++$i] === "crlf" ? "\r\n" : "\n";
	}elseif($argv[$i] === "spaces"){
		$INDENT = str_repeat(" ", (int) $argv[++$i]);
	}elseif($argv[$i] === "struct"){
		$STRUCT = $argv[++$i];
	}
}

$phpFile = realpath($argv[3]) . "/" . str_replace("\\", "/", $argv[4]) . ".php";
$fqn = explode("\\", $argv[4]);
@mkdir(dirname($phpFile), 0777, true);

$php = fopen($phpFile, "wb");
fwrite($php, "<?php{$EOL}{$EOL}");
fwrite($php, "/*{$EOL}");
fwrite($php, " * libkinetic node ID {$STRUCT}{$EOL}");
fwrite($php, " *{$EOL}");
fwrite($php, " * This file is automatically generated by libkinetic-def{$EOL}");
fwrite($php, " */{$EOL}{$EOL}");
fwrite($php, "declare(strict_types=1);{$EOL}{$EOL}");
fwrite($php, "namespace " . implode("\\", array_slice($fqn, 0, -1)) . ";{$EOL}{$EOL}");
fwrite($php, "{$STRUCT} " . array_slice($fqn, -1)[0] . "{{$EOL}");

$nodes = $parser->idMap;
ksort($nodes);
/** @var \SOFe\Libkinetic\KineticNode|KineticNodeWithId $node */
foreach($nodes as $node){
	$node->getId();
	fwrite($php, "{$INDENT}/**{$EOL}");
	fwrite($php, "{$INDENT} * " . array_slice(explode("\\", get_class($node)), -1)[0] . " &lt;" . $node->nodeName . "&gt;{$EOL}");
	fwrite($php, "{$INDENT} */{$EOL}");
	fwrite($php, "{$INDENT}public const " . strtoupper(str_replace([".", "-"], "_", $node->getId())) . " = \"{$node->getId()}\";{$EOL}");
}

fwrite($php, "}{$EOL}");
