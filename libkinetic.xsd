<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="https://rawgit.com/SOF3/libkinetic/master/libkinetic.xsd"
           version="0.0.3">
  <xs:annotation>
    <xs:documentation><![CDATA[
      libkinetic kinetic.xml schema.
      This XSD file is actually invalid. It is designed only so that it fulfills simple auto-completion and validation with PhpStorm.
    ]]></xs:documentation>
  </xs:annotation>

  <xs:element name="kinetic" type="RootType"/>
  <xs:element name="root" type="RootType"/>

  <!-- string types -->
  <xs:simpleType name="MessageRef">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="ControllerName">
    <xs:restriction base="xs:string">
      <xs:pattern value="([\\!]?[a-zA-Z_]\w+(\\[a-zA-Z_]\w+)*)|(\$.*)"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="IdFull">
    <xs:restriction base="xs:string">
      <xs:pattern value="\w+(\.\w+)+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="CommandName">
    <xs:restriction base="xs:string">
      <xs:pattern value="[^: ]+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PermissionName">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <xs:complexType name="RootType">
    <xs:annotation>
      <xs:documentation>The root element of a kinetic file</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="include" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Another kinetic file to load</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:attribute name="path" type="xs:string" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="cont" type="CommandType" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>The cont command used to interact with libkinetic user interface. Conventionally, this
            should be the plugin name acronym + "c".
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:group ref="UiNode"/>
    </xs:choice>
    <xs:attribute name="namespace" use="required">
      <xs:annotation>
        <xs:documentation>The namespace prefix used for FQNs</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:pattern value="[a-zA-Z_]\w+(\\[a-zA-Z_]\w+)*"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CommandType">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="alias" type="CommandName" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>An alias of the command, without the leading slash</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="name" type="CommandName" use="required">
      <xs:annotation>
        <xs:documentation>The command name without the leading slash</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:group name="UiNode">
    <xs:annotation>
      <xs:documentation>Represents a step in a UI flow</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="exit" type="ExitNode"/>
      <xs:element name="buffer" type="BufferNode"/>

      <xs:element name="switch" type="SwitchNode"/>
      <xs:element name="series" type="SeriesNode"/>
      <xs:element name="index" type="IndexNode"/>

      <xs:element name="form" type="BasicFormNode"/>
      <xs:element name="list" type="ListFormNode"/>
      <xs:element name="info" type="InfoFormNode"/>

      <xs:element name="recurForm" type="RecurFormNode"/>
      <xs:element name="dynForm" type="DynFormNode"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="UiNode">
    <xs:annotation>
      <xs:documentation> type of UiNode</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="onStart" minOccurs="1" maxOccurs="1">
        <xs:complexType>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="controller" type="ControllerName" minOccurs="0" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>FQN of an OnStartHandler controller</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="permission" minOccurs="0" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>Checks if a user has the required permission</xs:documentation>
              </xs:annotation>
              <xs:complexType>
                <xs:attribute name="name" type="PermissionName" use="optional"/>
                <xs:attribute name="predicate" type="ControllerName" use="optional">
                  <xs:annotation>
                    <xs:documentation>FQN of a UserPredicate controller</xs:documentation>
                  </xs:annotation>
                </xs:attribute>
                <xs:attribute name="invert" type="xs:boolean" default="false"/>
                <xs:attribute name="onFail" default="skip">
                  <xs:simpleType>
                    <xs:restriction>
                      <xs:enumeration value="skip">
                        <xs:annotation>
                          <xs:documentation>Skip UiNode execution, start onComplete</xs:documentation>
                        </xs:annotation>
                      </xs:enumeration>
                      <xs:enumeration value="complete">
                        <xs:annotation>
                          <xs:documentation>Skip UiNode execution and onComplete</xs:documentation>
                        </xs:annotation>
                      </xs:enumeration>
                      <xs:enumeration value="exit">
                        <xs:annotation>
                          <xs:documentation>Terminate all stacked flows</xs:documentation>
                        </xs:annotation>
                      </xs:enumeration>
                      <xs:enumeration value="break">
                        <xs:annotation>
                          <xs:documentation>Terminate the innermost subflow</xs:documentation>
                        </xs:annotation>
                      </xs:enumeration>
                    </xs:restriction>
                  </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="breakTarget" type="IdFull"/>
              </xs:complexType>
            </xs:element>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="onComplete">

      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="UiGroupNode">
    <xs:complexContent>
      <xs:extension base="UiNode">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="command" type="CommandType" minOccurs="0" maxOccurs="1"/>
          <xs:group ref="UiNode" minOccurs="0" maxOccurs="unbounded"/>
        </xs:choice>
        <xs:attribute name="id" type="IdFull"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ExitNode">
    <xs:complexContent>
      <xs:extension base="UiNode">

      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BufferNode">
    <xs:complexContent>
      <xs:extension base="UiNode">

      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SwitchNode">
    <xs:complexContent>
      <xs:extension base="UiGroupNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SeriesNode">
    <xs:complexContent>
      <xs:extension base="UiGroupNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="IndexNode">
    <xs:complexContent>
      <xs:extension base="UiGroupNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BasicFormNode">
    <xs:complexContent>
      <xs:extension base="UiNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ListFormNode">
    <xs:complexContent>
      <xs:extension base="UiNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="InfoFormNode">
    <xs:complexContent>
      <xs:extension base="UiNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RecurFormNode">
    <xs:complexContent>
      <xs:extension base="UiNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DynFormNode">
    <xs:complexContent>
      <xs:extension base="UiNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
