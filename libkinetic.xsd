<?xml version="1.0" encoding="UTF-8" ?>

<!--
    libkinetic

    Copyright (C) 2018 SOFe

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="https://rawgit.com/SOF3/libkinetic/master/libkinetic.xsd"
           version="0.0.3">
  <xs:annotation>
    <xs:documentation><![CDATA[
      libkinetic kinetic.xml schema.
      This XSD file is actually invalid. It is designed only so that it fulfills simple auto-completion and validation with PhpStorm.
    ]]></xs:documentation>
  </xs:annotation>

  <xs:element name="kinetic" type="RootType"/>
  <xs:element name="root" type="RootType"/>

  <!-- string types -->
  <xs:simpleType name="UserString">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="ControllerName">
    <xs:restriction base="xs:string">
      <xs:pattern value="([\\!]?[a-zA-Z_]\w+(\\[a-zA-Z_]\w+)*)|(\$.*)"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="IdString">
    <xs:restriction base="xs:string">
      <xs:pattern value="(\.\w+)+"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="VarName">
    <xs:restriction base="xs:string">
      <xs:pattern value="\w+(\.\w+)*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ScalarVarType">
    <xs:restriction>
      <xs:enumeration value="bool"/>
      <xs:enumeration value="integer"/>
      <xs:enumeration value="double"/>
      <xs:enumeration value="string"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="VarType">
    <xs:union>
      <xs:simpleType>
        <xs:restriction>
          <xs:enumeration value="bool"/>
          <xs:enumeration value="integer"/>
          <xs:enumeration value="double"/>
          <xs:enumeration value="string"/>
          <xs:enumeration value="object"/>
          <xs:enumeration value="list:bool"/>
          <xs:enumeration value="list:integer"/>
          <xs:enumeration value="list:double"/>
          <xs:enumeration value="list:string"/>
          <xs:enumeration value="list:object"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType>
        <xs:restriction>
          <xs:pattern value="(list:)*(bool|integer|double|string|object)"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>
  <xs:simpleType name="CommandName">
    <xs:restriction base="xs:string">
      <xs:pattern value="^[^: ]+$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="PermissionName">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <!-- element types -->
  <xs:complexType name="RootType">
    <xs:annotation>
      <xs:documentation>The root element of a kinetic file</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="include" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Another kinetic file to load</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:attribute name="path" type="xs:string" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="cont" type="CommandType" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>The cont command used to interact with libkinetic user interface. Conventionally, this
            should be the plugin name acronym + "c".
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:group ref="UiNode" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="wizard" type="WizardNode" minOccurs="0" maxOccurs="unbounded"/>
    </xs:choice>
    <xs:attribute name="namespace" use="required">
      <xs:annotation>
        <xs:documentation>The namespace prefix used for FQNs</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:pattern value="[a-zA-Z_]\w+(\\[a-zA-Z_]\w+)*"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CommandType">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="alias" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>An alias of the command, without the leading slash</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:attribute name="name" type="CommandName" use="required"/>
        </xs:complexType>
      </xs:element>
    </xs:choice>
    <xs:attribute name="name" type="CommandName" use="required">
      <xs:annotation>
        <xs:documentation>The command name without the leading slash</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="VarDeclaration">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="field" type="VarDeclaration" minOccurs="0" maxOccurs="unbounded"/>
    </xs:choice>

    <xs:attribute name="name" type="VarName" use="required"/>
    <xs:attribute name="type" type="VarType" use="required"/>
  </xs:complexType>

  <!-- UiNode stuff -->
  <xs:group name="UiNode">
    <xs:annotation>
      <xs:documentation>Represents a step in a UI flow</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="exit" type="ExitNode"/>
      <xs:element name="buffer" type="BufferNode"/>
      <xs:element name="noOp" type="BufferNode"/>
      <xs:element name="call" type="CallNode"/>

      <xs:element name="series" type="SeriesNode"/>
      <xs:element name="mux" type="MuxNode"/>
      <xs:element name="index" type="MuxNode"/>

      <xs:element name="form" type="BasicFormNode"/>
      <xs:element name="list" type="ListFormNode"/>
      <xs:element name="info" type="InfoFormNode"/>

      <xs:element name="recurForm" type="RecurFormNode"/>
      <xs:element name="dynForm" type="DynFormNode"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="UiNode" abstract="true">
    <xs:annotation>
      <xs:documentation>type of UiNode</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="command" minOccurs="0" maxOccurs="unbounded">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="CommandType">
              <xs:choice>
                <xs:sequence>
                  <xs:element name="arg" type="CommandArg" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>

                <xs:element name="overload" minOccurs="1" maxOccurs="unbounded">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="arg" type="CommandArg" minOccurs="0" maxOccurs="unbounded"/>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:choice>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>

      <xs:element name="return" type="ReturnNode" minOccurs="0" maxOccurs="unbounded"/>

      <xs:element name="onStart" type="NodeStateControllerList" minOccurs="1" maxOccurs="1"/>
      <xs:element name="onComplete" minOccurs="1" maxOccurs="1">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="NodeStateControllerList">
              <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="always">
                  <xs:complexType>
                    <xs:attribute name="action" type="NodeStateBehaviour" use="required"/>
                  </xs:complexType>
                </xs:element>
                <xs:element name="goto">
                  <xs:complexType>
                    <xs:attribute name="target" type="IdString" use="required"/>
                  </xs:complexType>
                </xs:element>
              </xs:choice>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
    <xs:attribute name="id" type="IdString"/>
    <xs:attribute name="onCancel" use="optional" default="fallthrough">
      <xs:simpleType>
        <xs:restriction>
          <xs:enumeration value="fallthrough"/>
          <xs:enumeration value="skip"/>
          <xs:enumeration value="break"/>
          <xs:enumeration value="exit"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ReturnNode">
    <xs:attribute name="name" type="IdString"/>
    <xs:attribute name="as" type="VarName"/>
  </xs:complexType>

  <xs:complexType name="NodeStateControllerList">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element name="controller" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>FQN of an OnStartHandler controller</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:attribute name="class" type="ControllerName" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:group ref="ConditionalHandler" minOccurs="0" maxOccurs="unbounded"/>
    </xs:choice>
  </xs:complexType>

  <xs:group name="ConditionalHandler">
    <xs:annotation>
      <xs:documentation>Modifies state behaviour if a condition is matched</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="or">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ConditionalHandler">
              <xs:sequence>
                <xs:group ref="ConditionalHandler" minOccurs="2" maxOccurs="unbounded"/>
              </xs:sequence>
              <xs:attribute name="shortCircuit" type="xs:boolean" use="optional" default="true"/>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="and">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ConditionalHandler">
              <xs:sequence>
                <xs:group ref="ConditionalHandler" minOccurs="2" maxOccurs="unbounded"/>
              </xs:sequence>
              <xs:attribute name="shortCircuit" type="xs:boolean" use="optional" default="true"/>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="xor">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ConditionalHandler">
              <xs:sequence>
                <xs:group ref="ConditionalHandler" minOccurs="2" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>

      <xs:element name="predicate">
        <xs:annotation>
          <xs:documentation>Triggers a UserPredicate controller</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ConditionalHandler">
              <xs:attribute name="controller" type="ControllerName" use="required"/>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="hasVar">
        <xs:annotation>
          <xs:documentation>Checks if a flow variable is set</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ConditionalHandler">
              <xs:attribute name="name" type="VarName" use="required"/>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="permission">
        <xs:annotation>
          <xs:documentation>Checks if a user has the required permission</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ConditionalHandler">
              <xs:attribute name="name" type="PermissionName" use="required"/>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element name="const">
        <xs:annotation>
          <xs:documentation>Outputs a constant boolean value</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ConditionalHandler">
              <xs:attribute name="value" type="xs:boolean" use="required"/>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ConditionalHandler">
    <xs:attribute name="not" type="xs:boolean" use="optional" default="false"/>
    <xs:attribute name="onTrue" type="NodeStateBehaviour" use="optional"/>
    <xs:attribute name="onTrueTarget" type="IdString" use="optional"/>
    <xs:attribute name="onFalse" type="NodeStateBehaviour" use="optional"/>
    <xs:attribute name="onFalseTarget" type="IdString" use="optional"/>
  </xs:complexType>

  <xs:simpleType name="NodeStateBehaviour">
    <xs:restriction>
      <xs:enumeration value="start"/>
      <xs:enumeration value="nil"/>
      <xs:enumeration value="execute"/>
      <xs:enumeration value="complete"/>
      <xs:enumeration value="skip"/>
      <xs:enumeration value="exit"/>
      <xs:enumeration value="break"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="ExitNode">
    <xs:complexContent>
      <xs:extension base="UiNode">

      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BufferNode">
    <xs:complexContent>
      <xs:extension base="UiNode">

      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CallNode">
    <xs:complexContent>
      <xs:extension base="UiNode">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="param">
            <xs:complexType>
              <xs:attribute name="var" type="VarName" use="required"/>
              <xs:attribute name="as" type="IdString" use="required"/>
            </xs:complexType>
          </xs:element>
        </xs:choice>
        <xs:attribute name="target" type="IdString" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="UiParentNode" abstract="true">
    <xs:complexContent>
      <xs:extension base="UiNode">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:group ref="UiNode" minOccurs="0" maxOccurs="unbounded"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="UiGroupNode" abstract="true">
    <xs:complexContent>
      <xs:extension base="UiParentNode">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="var" minOccurs="0" maxOccurs="unbounded" type="VarDeclaration"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CommandArg">
    <xs:attribute name="name" type="UserString" use="required"/>
    <xs:attribute name="type" use="optional" default="string">
      <xs:simpleType>
        <xs:restriction>
          <xs:enumeration value="string"/>
          <xs:enumeration value="integer"/>
          <xs:enumeration value="double"/>
          <xs:enumeration value="boolean"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="adapter" type="ControllerName" use="optional"/>
  </xs:complexType>

  <xs:complexType name="SeriesNode">
    <xs:complexContent>
      <xs:extension base="UiGroupNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MuxNode">
    <xs:complexContent>
      <xs:extension base="GenericFormNode">
        <xs:sequence>
          <xs:element name="option" type="MuxOptionNode" minOccurs="2" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="var" type="VarName" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="MuxOptionNode">
    <xs:sequence>
      <xs:group ref="UiNode"/>
      <xs:element name="alias">
        <xs:complexType>
          <xs:attribute name="name" type="CommandName" use="required"/>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="displayName" type="UserString" use="optional"/>
    <xs:attribute name="commandName" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="GenericFormNode">
    <xs:complexContent>
      <xs:extension base="UiNode">
        <xs:attribute name="title" type="UserString" use="required"/>
        <xs:attribute name="synopsis" type="UserString" use="required"/>
        <xs:attribute name="timeout" type="xs:double" use="optional" default="600"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BasicFormNode">
    <xs:complexContent>
      <xs:extension base="GenericFormNode">
        <xs:group ref="ElementNode"/>
        <xs:attribute name="synopsis" use="prohibited"/>
        <xs:attribute name="var" type="VarName" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ListFormNode">
    <xs:complexContent>
      <xs:extension base="GenericFormNode">
        <xs:all>
          <xs:element name="before" type="MuxOptionNode" minOccurs="0" maxOccurs="1"/>
          <xs:element name="after" type="MuxOptionNode" minOccurs="0" maxOccurs="1"/>
        </xs:all>
        <xs:attribute name="provider" type="ControllerName" use="required"/>
        <xs:attribute name="defaultVar" type="VarName" use="optional"/>
        <xs:attribute name="target" type="VarName" use="optional"/>
        <xs:attribute name="autoSelect" type="xs:boolean" use="optional" default="false"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="InfoFormNode">
    <xs:complexContent>
      <xs:extension base="GenericFormNode">
        <xs:all>
          <xs:element name="yes" type="MuxOptionNode" minOccurs="0" maxOccurs="1"/>
          <xs:element name="no" type="MuxOptionNode" minOccurs="0" maxOccurs="1"/>
        </xs:all>
        <xs:attribute name="defaultVar" type="VarName" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RecurFormNode">
    <xs:complexContent>
      <xs:extension base="GenericFormNode">
        <xs:choice minOccurs="1" maxOccurs="3">
          <xs:element name="before" type="RecurFormSectionNode"/>
          <xs:element name="after" type="RecurFormSectionNode"/>
          <xs:element name="each" type="RecurFormSectionNode"/>
        </xs:choice>
        <xs:attribute name="provider" type="ControllerName" use="required"/>
        <xs:attribute name="synopsis" use="prohibited"/>
        <xs:attribute name="onEmpty" use="optional">
          <xs:simpleType>
            <xs:restriction>
              <xs:enumeration value="execute"/>
              <xs:enumeration value="skip"/>
              <xs:enumeration value="cancel"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RecurFormSectionNode">
    <xs:group ref="ElementNode" minOccurs="1" maxOccurs="unbounded"/>
    <xs:attribute name="var" type="VarName" use="optional"/>
  </xs:complexType>

  <xs:complexType name="DynFormNode">
    <xs:complexContent>
      <xs:extension base="UiNode">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Wizard -->
  <xs:complexType name="WizardNode">
    <xs:complexContent>
      <xs:extension base="UiGroupNode">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="param" type="VarDeclaration"/>
          <xs:element name="return" type="VarDeclaration"/>
        </xs:choice>
        <xs:attribute name="id" type="IdString" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Element implementations -->
  <xs:group name="ElementNode">
    <xs:choice>
      <xs:element name="label" type="LabelElementNode"/>
      <xs:element name="input" type="InputElementNode"/>
      <xs:element name="toggle" type="ToggleElementNode"/>
      <xs:element name="slider" type="SliderElementNode"/>
      <xs:element name="select" type="SelectElementNode"/>
    </xs:choice>
  </xs:group>
  <xs:complexType name="ElementNode" abstract="true">
    <xs:attribute name="id" use="optional">
      <xs:annotation>
        <xs:documentation>The ID of the element inside its parent, sometimes required</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="LabelElementNode">
    <xs:complexContent>
      <xs:extension base="ElementNode">
        <xs:attribute name="text" type="UserString" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="InputElementNode">
    <xs:complexContent>
      <xs:extension base="ElementNode">
        <xs:attribute name="text" type="UserString" use="required"/>
        <xs:attribute name="placeholder" type="UserString" use="optional"/>
        <xs:attribute name="default" type="xs:string" use="optional" default=""/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ToggleElementNode">
    <xs:complexContent>
      <xs:extension base="ElementNode">
        <xs:attribute name="text" type="UserString" use="required"/>
        <xs:attribute name="default" type="xs:boolean" use="optional" default="false"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SliderElementNode">
    <xs:complexContent>
      <xs:extension base="ElementNode">
        <xs:attribute name="text" type="UserString" use="required"/>
        <xs:attribute name="min" type="xs:decimal" use="required"/>
        <xs:attribute name="max" type="xs:decimal" use="required"/>
        <xs:attribute name="step" type="xs:decimal" use="optional" default="0"/>
        <xs:attribute name="default" type="xs:decimal" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SelectElementNode">
    <xs:complexContent>
      <xs:extension base="ElementNode">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="option">
            <xs:complexType>
              <xs:attribute name="commandName" type="xs:string" use="required"/>
              <xs:attribute name="displayName" type="UserString" use="required"/>
              <xs:attribute name="value" type="UserString" use="required"/>
              <xs:attribute name="default" type="xs:boolean" use="optional" default="false"/>
            </xs:complexType>
          </xs:element>
        </xs:choice>
        <xs:attribute name="text" type="UserString" use="required"/>
        <xs:attribute name="mode" use="optional" default="dropdown">
          <xs:simpleType>
            <xs:restriction>
              <xs:enumeration value="dropdown"/>
              <xs:enumeration value="slider"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="provider" type="ControllerName" use="optional"/>
        <xs:attribute name="valueType" type="ScalarVarType" use="optional" default="string"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
